* 그래프

- 정점(node, vertex)와 간선(edge)로 이루어짐
- G=(V,E)로 나타냄

* 단순 경로/ 단수 사이클 - 정점을 두 번 이상 방문하지 않음
* 방향 있는 그래프 - A=>C는 있지만 C=>A는 없다
* 방향 없는 그래프 - A=>C, C=>A를 나타냄. (양방향 그래프)
* 간선 여러개 - A->B 를 향하는 간선이 꼭 1개가 아닐 수 있다
* 차수 - 정점과 연결되어 있는 간선의 갯수




* 표현

- 첫 줄은 (정점의 개수, 간선의 개수)
- 두번째불부터 간선의 정보

==인접행렬==
정점이 N개 일때, N*N으로 표현
A[I][j]. i->j 간선이 있을 때 1/ 없을때 0으로 표현 / (가중치로도 사용 가능)
=======인접행렬=======
#include <cstdio>
#include <vector>
int a[10][10];
int main() {
    int n, m;
    scanf("%d %d",&n,&m);
    for (int i=0; i<m; i++) {
        int u,v,w;
        scanf("%d %d %d",&u,&v,&w);
        a[u][v] = a[v][u] = w;
	} 
}

==인접리스트==
A[I]=I 와 연결된 정점을 링크드 리스트로 포함하고 있음. 주로 벡터와 같이 길이를 변경할 수 있는 배열을 이용해 구현

======인접리스트======
#include <cstdio>
#include <vector>
using namespace std;
vector<int> a[10];
int main() {
    int n, m;
    scanf("%d %d",&n,&m);
    for (int i=0; i<m; i++) {
        int u,v;
        scanf("%d %d",&u,&v);
        a[u].push_back(v); a[v].push_back(u);
	}
 }

* 그래프의 탐색
Dfs 깊이 우선 / 스택를 사용 
- 스택을 사용해 갈 수 있는 만큼 최대한 많이 가고, 갈 수 없으면 이전 정점으로 돌아감
Bfs 넓이 우선 / 큐를 사용
