* dynamic programming

- 두가지 속성을 만족해야 dp를 풀 수 있음

1) Overlapping Subproblem	(겹치는 부분문제)
	큰 문제와 작은 문제를 쪼개서 푼다	// 피보나치
2) Optimal Substructure		(최적부분구조)
	문제의 정답을 작은 문제의 정답에서 구함
	ex) 서울에서 부산을 가는 가장 빠른 길이 대전과 대구를 순서대로 거쳐야 한다면
	    대전에서 부산을 가는 가장 빠른 길은 대구를 거치는 것이다.
/Users/hwang-yunho/Desktop/dynamic programming.txt

=> 작은 정답을 구하면 정답을 어딘가에 메모해 놓는다
=> 이런 메모하는 것을 코드의 구현에서는 배열에 저장할 수 있다

한 번 답을 구할 때, 어딘가에 메모를 해놓고, 중복 호출이면 메모해놓은 값을 리턴


* dp 푸는 방법

1) Top-Down (재귀 이용)
1-1) 문제를 작은 문제로 나눈다.		fibonacci(n)를 풀어야 함. fibonacci(n-1)과 fibonacci(n-2)로 문제를 나눔
1-2) 작은 문제를 푼다.			fibonacci(n-1)과 fibonacci(n-2)를 호출해 문제를 품	
1-3) 작은 문제를 풀었으니, 이제 문제를 푼다.	fibonacci(n-1)의 값과 fibonacci(n-2)의 값을 더해 문제를 품


2) Bottom-Up (for문 이용)
2-1) 문제의 크기가 작은 문제부터 차례대로 푼다.
2-2) 문제의 크기를 조금씩 크게 만들면서 문제를 점점 푼다.
2-3) 작은 문제를 풀면서 왔기 때문에, 큰 문제는 항상 풀 수 있다.
2-4) 그러다보면, 언젠간 풀어야 하는 문제를 풀 수 있다.
